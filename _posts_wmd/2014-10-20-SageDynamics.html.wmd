---
layout: post
title:  "Sage Dynamics Demo"
date:   2014-10-20 19:00:01
categories: jekyll update
---
<h2> Intro </h2>
<p>
[This is an adaptation of <a href="http://lalashan.mcmaster.ca/theobio/worden/index.php/SageDynamics/Demo">a page from my open lab notebook wiki</a>, as a demo of my Working Markup blog-post system. -lw]
<p>
This post demonstrates a set of <a href="http://www.sagemath.org/">Sage</a> classes I wrote to work with continuous-time dynamical systems, the kind of system my colleagues and I use a lot as mathematical models.
<p>
The computations in this blog post are implemented in two parts.  The Sage class library is kept in a <a href="https://github.com/worden-lee/SageDynamics">GitHub repository by itself</a>, and the Sage scripts that use the library to implement a simple demo system on this page are stored as part of this page.
<p>
On this page I use those Sage classes to construct a <a href="http://www.tiem.utk.edu/~gross/bioed/bealsmodules/competition.html">simple population biology model</a> of two populations, and analyze and evaluate it.
<p>
The Sage code for this model is below.  Here's its output, in LaTeX format:
<p>
<project-file filename="ode-system-demo.sage.out.latexml.html"/>
<p>
Here's the state space plot that the program creates, showing a representative trajectory of the model's dynamics, with flow vector field and zero-net-growth isoclines:
<p>
<project-file filename="ode-system-demo.png"/>
<p>
And a bifurcation diagram of total population vs. $$\alpha_{12}$$ (black=stable, red=repelling point, blue=saddle):
<p>
<project-file filename="bifurcation-diagram.png"/>
<p>
<h2> Source code </h2>

Here is the source code for this page's demo:
<p>
<source-file filename="ode-system-demo.sage.step" lang=python>
# requires: $(SageDynamics)/dynamicalsystems.py $(SageUtils)/latex_output.py
# produces: ode-system-demo.sage.out.tex ode-system-demo.png bifurcation-diagram.png

# use the dynamicalsystems module from SageDynamics
sys.path.append( os.environ['SageDynamics'] )
from dynamicalsystems import *
# use the latex_output module from SageUtils
sys.path.append( os.environ['SageUtils'] )
from latex_output import *

# I'll use a simple competition model borrowed from 
# http://www.tiem.utk.edu/~gross/bioed/bealsmodules/competition.html

# make variables for easy use
N_1, N_2, r_1, r_2, K_1, K_2 = SR.var( 'N_1, N_2, r_1, r_2, K_1, K_2' )
# alpha variables have special latex formatting for the double subscripts
alpha_12 = SR.var( 'alpha_12', latex_name='\\alpha_{12}' )
alpha_21 = SR.var( 'alpha_21', latex_name='\\alpha_{21}' )

# create the competition model by providing flow equations and state variables
comp_system_generic = ODE_system(
    { N_1: r_1 * N_1 * (K_1 - N_1 - alpha_12 * N_2) / K_1,
      N_2: r_2 * N_2 * (K_2 - alpha_21 * N_1 - N_2) / K_2 },
    [ N_1, N_2 ] )

# write output into a tex file
ltx = latex_output( 'ode-system-demo.sage.out.tex' )

ltx.write( 'The generic competition model:' )
ltx.write_block( comp_system_generic )

# and create a specific instantiation of the model by binding parameters
# it has a nontrivial solution if K_1/alpha_12 > K_2 and K_2/alpha_21 > K_1
comp_system_stable = comp_system_generic.bind( {
  K_1 : 1, K_2 : 5/4, alpha_12 : 1/2, alpha_21 : 1/2,
  r_1 : 1, r_2 : 1 } )

ltx.write( 'The competition model with parameters bound to specific values:' )
ltx.write_block( comp_system_stable )

# find the equilibria
ltx.write( 'Equilibria of the generic model: ' )
for eq in comp_system_generic.equilibria():
  ltx.write_block( column_vector( [ eq[N_1], eq[N_2] ] ) )

# and check stability of the bound ones
ltx.write( 'Stable equilibria of the bound model: ' )
for eq in comp_system_stable.stable_equilibria():
  ltx.write_block( column_vector( [ eq[N_1], eq[N_2] ] ) )

# solve numerically given starting time and initial conditions
s = comp_system_stable.solve( [0, 0.05, 0.02] )

# plot the system as a vector field on the x-y plane
p = comp_system_stable.plot_vector_field( (N_1,0,1.3), (N_2,0,1.3), color='gray', figsize=(5,5) )
# plot population nullclines
# (there is a plot_ZNGIs method for this, but to use it I'd need to
# be using the PopulationDynamicsSystem subclass)
p += comp_system_stable.plot_isoclines( (N_1,0,1.3), (N_2,0,1.3), [(N_1,0),(N_2,0)], color='gray' )
# superimpose the numerically-solved trajectory onto the same plot
p += s.plot( N_1, N_2, color='red' )
p.axes_labels( [ '$N_1$', '$N_2$' ] )
# render the plot into a png file
p.save( 'ode-system-demo.png' )

# and now do bifurcation diagram

# bind all parameters except the bifurcation parameter
comp_system_b = comp_system_generic.bind( {
  K_1 : 1, K_2 : 5/4, alpha_21 : 1/2, # bind everything except alpha_12
  r_1 : 1, r_2 : 1 } )
# and do plot of equilibrium population as a function of varying parameter
# alpha_12, color coded by whether the equilibrium is stable
comp_system_b.plot_bifurcation_diagram( (alpha_12, -5, 5), (N_1 + N_2, -5, 5), filename='bifurcation-diagram.png', figsize=(5,5) )

# and close the latex output
ltx.close()
</source-file>

And a small makefile to get the above Sage code to connect with the libraries pulled from GitHub into a separate directory:
<source-file filename="libraries.mk">
export SageUtils=../SageDynamics/SageUtils
export SageDynamics=../SageDynamics/SageDynamics

$(SageDynamics)/% :
	$(MAKE) -C $(SageDynamics) $*
 
$(SageUtils)/% :
	$(MAKE) -C $(SageUtils) $*
 
# Use the general rules from the utility project's makefiles
-include $(SageUtils)/sage.mk
-include $(SageUtils)/step.mk
</source-file>

<h2> Reproducibility </h2>
<p>
Here are instructions to run this Sage code yourself.  You will need Sage, GNU make, git, perl, and maybe some other utilities installed.
<ul>
<li> Download and unpack the source code from this page: <project-file filename="wmd_export.tgz"/>
<li> Clone the Sage library code from Git: <a href="https://github.com/worden-lee/SageDynamics">https://github.com/worden-lee/SageDynamics</a>
<li> In the code directory from this page, edit the makefile "<tt>libraries.mk</tt>" so that it has the correct locations for the SageUtils and SageDynamics directories that you checked out from Git.
<li> In the code directory, run "<tt>make ode-system-demo.sage.out.tex</tt>"
</ul>
<p>
To see how this blog post is written, with source code embedded, see <a href="https://github.com/worden-lee/github-pages-sandbox/blob/gh-pages/_posts_wmd/2014-10-20-SageDynamics.html.wmd">https://github.com/worden-lee/github-pages-sandbox/blob/gh-pages/_posts_wmd/2014-10-20-SageDynamics.html.wmd</a>.
