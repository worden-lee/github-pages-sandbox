{"uniq_tokens":{"UNIQ-WW-2003396279-QINU":{"tag":"project-file","args":{"filename":"ode-system-demo.sage.out.latexml.html","project":"\/usr\/local\/src\/jekyll-test\/github-pages-sandbox\/wmd_files\/2014-10-20-SageDynamics"}},"UNIQ-WW-1975631061-QINU":{"tag":"project-file","args":{"filename":"ode-system-demo.png","project":"\/usr\/local\/src\/jekyll-test\/github-pages-sandbox\/wmd_files\/2014-10-20-SageDynamics"}},"UNIQ-WW-1283225432-QINU":{"tag":"source-file","args":{"filename":"603357d099ad67140d2e77734ac6fcde.tex-math","standalone":"yes","project":"Standalone?603357d099ad67140d2e77734ac6fcde.tex-math"}},"UNIQ-WW-1191522516-QINU":{"tag":"project-file","args":{"filename":"bifurcation-diagram.png","project":"\/usr\/local\/src\/jekyll-test\/github-pages-sandbox\/wmd_files\/2014-10-20-SageDynamics"}},"UNIQ-WW-341867145-QINU":{"tag":"source-file","args":{"filename":"ode-system-demo.sage.step","lang":"python","project":"\/usr\/local\/src\/jekyll-test\/github-pages-sandbox\/wmd_files\/2014-10-20-SageDynamics"}},"UNIQ-WW-458740603-QINU":{"tag":"source-file","args":{"filename":"libraries.mk","project":"\/usr\/local\/src\/jekyll-test\/github-pages-sandbox\/wmd_files\/2014-10-20-SageDynamics"}},"UNIQ-WW-579874914-QINU":{"tag":"project-file","args":{"filename":"wmd_export.tgz","project":"\/usr\/local\/src\/jekyll-test\/github-pages-sandbox\/wmd_files\/2014-10-20-SageDynamics"}}},"file_contents":{"":{"0":{"attributes":{"filename":"ode-system-demo.sage.out.latexml.html"},"source":false,"position":[[1163,1226]]},"1":{"attributes":{"filename":"ode-system-demo.png"},"source":false,"position":[[1405,1450]]},"603357d099ad67140d2e77734ac6fcde.tex-math":{"attributes":{"filename":"603357d099ad67140d2e77734ac6fcde.tex-math","standalone":"yes"},"content":"\\alpha_{12}","source":true,"position":[[1506,1613]]},"2":{"attributes":{"filename":"bifurcation-diagram.png"},"source":false,"position":[[1669,1718]]},"ode-system-demo.sage.step":{"attributes":{"filename":"ode-system-demo.sage.step","lang":"python"},"content":"# requires: $(SageDynamics)\/dynamicalsystems.py $(SageUtils)\/latex_output.py\n# produces: ode-system-demo.sage.out.tex ode-system-demo.png bifurcation-diagram.png\n\n# use the dynamicalsystems module from SageDynamics\nsys.path.append( os.environ['SageDynamics'] )\nfrom dynamicalsystems import *\n# use the latex_output module from SageUtils\nsys.path.append( os.environ['SageUtils'] )\nfrom latex_output import *\n\n# I'll use a simple competition model borrowed from \n# http:\/\/www.tiem.utk.edu\/~gross\/bioed\/bealsmodules\/competition.html\n\n# make variables for easy use\nN_1, N_2, r_1, r_2, K_1, K_2 = SR.var( 'N_1, N_2, r_1, r_2, K_1, K_2' )\n# alpha variables have special latex formatting for the double subscripts\nalpha_12 = SR.var( 'alpha_12', latex_name='\\\\alpha_{12}' )\nalpha_21 = SR.var( 'alpha_21', latex_name='\\\\alpha_{21}' )\n\n# create the competition model by providing flow equations and state variables\ncomp_system_generic = ODE_system(\n    { N_1: r_1 * N_1 * (K_1 - N_1 - alpha_12 * N_2) \/ K_1,\n      N_2: r_2 * N_2 * (K_2 - alpha_21 * N_1 - N_2) \/ K_2 },\n    [ N_1, N_2 ] )\n\n# write output into a tex file\nltx = latex_output( 'ode-system-demo.sage.out.tex' )\n\nltx.write( 'The generic competition model:' )\nltx.write_block( comp_system_generic )\n\n# and create a specific instantiation of the model by binding parameters\n# it has a nontrivial solution if K_1\/alpha_12 > K_2 and K_2\/alpha_21 > K_1\ncomp_system_stable = comp_system_generic.bind( {\n  K_1 : 1, K_2 : 5\/4, alpha_12 : 1\/2, alpha_21 : 1\/2,\n  r_1 : 1, r_2 : 1 } )\n\nltx.write( 'The competition model with parameters bound to specific values:' )\nltx.write_block( comp_system_stable )\n\n# find the equilibria\nltx.write( 'Equilibria of the generic model: ' )\nltx.write( '\\n\\\\[ ',\n\t', '.join( latex( column_vector( [ eq[N_1], eq[N_2] ] ) )\n\t\tfor eq in comp_system_generic.equilibria() ),\n\t'\\n\\\\]' )\n\n# and check stability of the bound ones\nltx.write( 'Stable equilibria of the bound model: ' )\nltx.write( '\\n\\\\[',\n\t', '.join( latex( column_vector( [ eq[N_1], eq[N_2] ] ) )\n\t\tfor eq in comp_system_stable.stable_equilibria() ),\n\t'\\n\\\\]' )\n\n# solve numerically given starting time and initial conditions\ns = comp_system_stable.solve( [0, 0.05, 0.02] )\n\n# plot the system as a vector field on the x-y plane\np = comp_system_stable.plot_vector_field( (N_1,0,1.3), (N_2,0,1.3), color='gray', figsize=(5,5) )\n# plot population nullclines\n# (there is a plot_ZNGIs method for this, but to use it I'd need to\n# be using the PopulationDynamicsSystem subclass)\np += comp_system_stable.plot_isoclines( (N_1,0,1.3), (N_2,0,1.3), [(N_1,0),(N_2,0)], color='gray' )\n# superimpose the numerically-solved trajectory onto the same plot\np += s.plot( N_1, N_2, color='red' )\np.axes_labels( [ '$N_1$', '$N_2$' ] )\n# render the plot into a png file\np.save( 'ode-system-demo.png' )\n\n# and now do bifurcation diagram\n\n# bind all parameters except the bifurcation parameter\ncomp_system_b = comp_system_generic.bind( {\n  K_1 : 1, K_2 : 5\/4, alpha_21 : 1\/2, # bind everything except alpha_12\n  r_1 : 1, r_2 : 1 } )\n# and do plot of equilibrium population as a function of varying parameter\n# alpha_12, color coded by whether the equilibrium is stable\ncomp_system_b.plot_bifurcation_diagram( (alpha_12, -5, 5), (N_1 + N_2, -5, 5), filename='bifurcation-diagram.png', figsize=(5,5) )\n\n# and close the latex output\nltx.close()\n","source":true,"position":[[1798,5224]]},"libraries.mk":{"attributes":{"filename":"libraries.mk"},"content":"export SageUtils=..\/SageDynamics\/SageUtils\nexport SageDynamics=..\/SageDynamics\/SageDynamics\n\n$(SageDynamics)\/% :\n\t$(MAKE) -C $(SageDynamics) $*\n \n$(SageUtils)\/% :\n\t$(MAKE) -C $(SageUtils) $*\n \n# Use the general rules from the utility project's makefiles\n-include $(SageUtils)\/sage.mk\n-include $(SageUtils)\/step.mk\n","source":true,"position":[[5351,5716]]},"3":{"attributes":{"filename":"wmd_export.tgz"},"source":false,"position":[[5950,5990]]}},"cache-filled":true},"expanded_text":"---\nlayout: post\ntitle:  \"Sage Dynamics Demo\"\ndate:   2014-10-20 19:00:01\ncategories: jekyll update\n---\n<h2> Intro <\/h2>\n<p>\n[This is an adaptation of <a href=\"http:\/\/lalashan.mcmaster.ca\/theobio\/worden\/index.php\/SageDynamics\/Demo\">a page from my open lab notebook wiki<\/a>, as a demo of my Working Markup blog-post system. -lw]\n<p>\nThis post demonstrates a set of <a href=\"http:\/\/www.sagemath.org\/\">Sage<\/a> classes I wrote to work with continuous-time dynamical systems, the kind of system my colleagues and I use a lot as mathematical models.\n<p>\nThe computations in this blog post are implemented in two parts.  The Sage class library is kept in a <a href=\"https:\/\/github.com\/worden-lee\/SageDynamics\">GitHub repository by itself<\/a>, and the Sage scripts that use the library to implement a simple demo system on this page are stored as part of this page.\n<p>\nOn this page I use those Sage classes to construct a <a href=\"http:\/\/www.tiem.utk.edu\/~gross\/bioed\/bealsmodules\/competition.html\">simple population biology model<\/a> of two populations, and analyze and evaluate it.\n<p>\nThe Sage code for this model is below.  Here's its output, in LaTeX format:\n<p>\n<project-file filename=\"ode-system-demo.sage.out.latexml.html\"\/>\n<p>\nHere's the state space plot that the program creates, showing a representative trajectory of the model's dynamics, with flow vector field and zero-net-growth isoclines:\n<p>\n<project-file filename=\"ode-system-demo.png\"\/>\n<p>\nAnd a bifurcation diagram of total population vs. <source-file filename=\"603357d099ad67140d2e77734ac6fcde.tex-math\" standalone=\"yes\">\\alpha_{12}<\/source-file> (black=stable, red=repelling point, blue=saddle):\n<p>\n<project-file filename=\"bifurcation-diagram.png\"\/>\n<p>\n<h2> Source code <\/h2>\n\nHere is the source code for this page's demo:\n<p>\n<source-file filename=\"ode-system-demo.sage.step\" lang=python>\n# requires: $(SageDynamics)\/dynamicalsystems.py $(SageUtils)\/latex_output.py\n# produces: ode-system-demo.sage.out.tex ode-system-demo.png bifurcation-diagram.png\n\n# use the dynamicalsystems module from SageDynamics\nsys.path.append( os.environ['SageDynamics'] )\nfrom dynamicalsystems import *\n# use the latex_output module from SageUtils\nsys.path.append( os.environ['SageUtils'] )\nfrom latex_output import *\n\n# I'll use a simple competition model borrowed from \n# http:\/\/www.tiem.utk.edu\/~gross\/bioed\/bealsmodules\/competition.html\n\n# make variables for easy use\nN_1, N_2, r_1, r_2, K_1, K_2 = SR.var( 'N_1, N_2, r_1, r_2, K_1, K_2' )\n# alpha variables have special latex formatting for the double subscripts\nalpha_12 = SR.var( 'alpha_12', latex_name='\\\\alpha_{12}' )\nalpha_21 = SR.var( 'alpha_21', latex_name='\\\\alpha_{21}' )\n\n# create the competition model by providing flow equations and state variables\ncomp_system_generic = ODE_system(\n    { N_1: r_1 * N_1 * (K_1 - N_1 - alpha_12 * N_2) \/ K_1,\n      N_2: r_2 * N_2 * (K_2 - alpha_21 * N_1 - N_2) \/ K_2 },\n    [ N_1, N_2 ] )\n\n# write output into a tex file\nltx = latex_output( 'ode-system-demo.sage.out.tex' )\n\nltx.write( 'The generic competition model:' )\nltx.write_block( comp_system_generic )\n\n# and create a specific instantiation of the model by binding parameters\n# it has a nontrivial solution if K_1\/alpha_12 > K_2 and K_2\/alpha_21 > K_1\ncomp_system_stable = comp_system_generic.bind( {\n  K_1 : 1, K_2 : 5\/4, alpha_12 : 1\/2, alpha_21 : 1\/2,\n  r_1 : 1, r_2 : 1 } )\n\nltx.write( 'The competition model with parameters bound to specific values:' )\nltx.write_block( comp_system_stable )\n\n# find the equilibria\nltx.write( 'Equilibria of the generic model: ' )\nltx.write( '\\n\\\\[ ',\n\t', '.join( latex( column_vector( [ eq[N_1], eq[N_2] ] ) )\n\t\tfor eq in comp_system_generic.equilibria() ),\n\t'\\n\\\\]' )\n\n# and check stability of the bound ones\nltx.write( 'Stable equilibria of the bound model: ' )\nltx.write( '\\n\\\\[',\n\t', '.join( latex( column_vector( [ eq[N_1], eq[N_2] ] ) )\n\t\tfor eq in comp_system_stable.stable_equilibria() ),\n\t'\\n\\\\]' )\n\n# solve numerically given starting time and initial conditions\ns = comp_system_stable.solve( [0, 0.05, 0.02] )\n\n# plot the system as a vector field on the x-y plane\np = comp_system_stable.plot_vector_field( (N_1,0,1.3), (N_2,0,1.3), color='gray', figsize=(5,5) )\n# plot population nullclines\n# (there is a plot_ZNGIs method for this, but to use it I'd need to\n# be using the PopulationDynamicsSystem subclass)\np += comp_system_stable.plot_isoclines( (N_1,0,1.3), (N_2,0,1.3), [(N_1,0),(N_2,0)], color='gray' )\n# superimpose the numerically-solved trajectory onto the same plot\np += s.plot( N_1, N_2, color='red' )\np.axes_labels( [ '$N_1$', '$N_2$' ] )\n# render the plot into a png file\np.save( 'ode-system-demo.png' )\n\n# and now do bifurcation diagram\n\n# bind all parameters except the bifurcation parameter\ncomp_system_b = comp_system_generic.bind( {\n  K_1 : 1, K_2 : 5\/4, alpha_21 : 1\/2, # bind everything except alpha_12\n  r_1 : 1, r_2 : 1 } )\n# and do plot of equilibrium population as a function of varying parameter\n# alpha_12, color coded by whether the equilibrium is stable\ncomp_system_b.plot_bifurcation_diagram( (alpha_12, -5, 5), (N_1 + N_2, -5, 5), filename='bifurcation-diagram.png', figsize=(5,5) )\n\n# and close the latex output\nltx.close()\n<\/source-file>\n\nAnd a small makefile to get the above Sage code to connect with the libraries pulled from GitHub into a separate directory:\n<source-file filename=\"libraries.mk\">\nexport SageUtils=..\/SageDynamics\/SageUtils\nexport SageDynamics=..\/SageDynamics\/SageDynamics\n\n$(SageDynamics)\/% :\n\t$(MAKE) -C $(SageDynamics) $*\n \n$(SageUtils)\/% :\n\t$(MAKE) -C $(SageUtils) $*\n \n# Use the general rules from the utility project's makefiles\n-include $(SageUtils)\/sage.mk\n-include $(SageUtils)\/step.mk\n<\/source-file>\n\n<h2> Reproducibility <\/h2>\n<p>\nHere are instructions to run this Sage code yourself.  You will need Sage, GNU make, git, perl, and maybe some other utilities installed.\n<ul>\n<li> Download and unpack the source code from this page: <project-file filename=\"wmd_export.tgz\"\/>\n<li> Clone the Sage library code from Git: <a href=\"https:\/\/github.com\/worden-lee\/SageDynamics\">https:\/\/github.com\/worden-lee\/SageDynamics<\/a>\n<li> In the code directory from this page, edit the makefile \"<tt>libraries.mk<\/tt>\" so that it has the correct locations for the SageUtils and SageDynamics directories that you checked out from Git.\n<li> In the code directory, run \"<tt>make ode-system-demo.sage.out.tex<\/tt>\"\n<\/ul>\n<p>\nTo see how this blog post is written, with source code embedded, see <a href=\"https:\/\/github.com\/worden-lee\/github-pages-sandbox\/blob\/gh-pages\/_posts_wmd\/2014-10-20-SageDynamics.html.wmd\">https:\/\/github.com\/worden-lee\/github-pages-sandbox\/blob\/gh-pages\/_posts_wmd\/2014-10-20-SageDynamics.html.wmd<\/a>.\n"}
